// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AppleOAuth struct {
	AccessToken string  `json:"accessToken"`
	User        *string `json:"user"`
}

type BasicLogin struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Event struct {
	ID         string       `json:"id"`
	UUID       string       `json:"uuid"`
	CreatorID  *string      `json:"creatorID"`
	LocationID string       `json:"locationID"`
	StartTime  string       `json:"startTime"`
	EndTime    string       `json:"endTime"`
	Lat        float64      `json:"lat"`
	Long       float64      `json:"long"`
	Distance   *float64     `json:"distance"`
	Attendees  []*User      `json:"attendees"`
	Location   *Location    `json:"location"`
	Status     *EventStatus `json:"status"`
	LiveCount  int          `json:"liveCount"`
	CreatedAt  *string      `json:"createdAt"`
	UpdatedAt  *string      `json:"updatedAt"`
}

type GoogleOAuth struct {
	AccessToken string `json:"accessToken"`
}

type Location struct {
	ID                  string   `json:"id"`
	UUID                string   `json:"uuid"`
	Name                *string  `json:"name"`
	Slug                *string  `json:"slug"`
	Avatar              string   `json:"avatar"`
	Description         *string  `json:"description"`
	LocationType        *string  `json:"locationType"`
	Street              *string  `json:"street"`
	City                *string  `json:"city"`
	State               *string  `json:"state"`
	Zip                 *string  `json:"zip"`
	Lat                 *float64 `json:"lat"`
	Long                *float64 `json:"long"`
	Distance            *float64 `json:"distance"`
	Members             []*User  `json:"members"`
	Events              []*Event `json:"events"`
	ScheduleRule        *string  `json:"scheduleRule"`
	IsActive            bool     `json:"isActive"`
	HasCovidRestriction bool     `json:"hasCovidRestriction"`
	AppointmentTypeID   *string  `json:"appointmentTypeID"`
	CalendarID          *string  `json:"calendarID"`
	CreatedAt           *string  `json:"createdAt"`
	UpdatedAt           *string  `json:"updatedAt"`
	DeletedAt           *string  `json:"deletedAt"`
}

type NewUser struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type PersonalAccessToken struct {
	ID        string  `json:"id"`
	UserID    *string `json:"userID"`
	Token     *string `json:"token"`
	CreatedAt *string `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt"`
}

type Reservation struct {
	ID              string  `json:"id"`
	EventID         *string `json:"eventID"`
	UserID          *string `json:"userID"`
	ReservationTime *string `json:"reservationTime"`
	CreatedAt       *string `json:"createdAt"`
	UpdatedAt       *string `json:"updatedAt"`
}

type UpdateSettings struct {
	PrimaryCity            *string `json:"primaryCity"`
	PrimaryState           *string `json:"primaryState"`
	PrimaryZipCode         *string `json:"primaryZipCode"`
	PreferredLocationTypes *string `json:"preferredLocationTypes"`
	PreferredDistance      int     `json:"preferredDistance"`
	NotifyComments         bool    `json:"notifyComments"`
	NotifyEvents           bool    `json:"notifyEvents"`
	NotifyRecommendations  bool    `json:"notifyRecommendations"`
	NotifyFollowerActivity bool    `json:"notifyFollowerActivity"`
}

type UpdateUser struct {
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
	Avatar    *string `json:"avatar"`
	ExpoToken *string `json:"expoToken"`
}

type User struct {
	ID               int            `json:"id"`
	UUID             string         `json:"uuid"`
	FirstName        *string        `json:"firstName"`
	LastName         *string        `json:"lastName"`
	Avatar           string         `json:"avatar"`
	Email            string         `json:"email"`
	ExpoToken        *string        `json:"expoToken"`
	LastSeenAt       *string        `json:"lastSeenAt"`
	LastSeenLocation *string        `json:"lastSeenLocation"`
	Settings         *UserSettings  `json:"settings"`
	Locations        []*Location    `json:"locations"`
	Events           []*Event       `json:"events"`
	Followers        []*User        `json:"followers"`
	Followings       []*User        `json:"followings"`
	Reservations     []*Reservation `json:"reservations"`
	CreatedAt        *string        `json:"createdAt"`
	UpdatedAt        *string        `json:"updatedAt"`
	DeletedAt        *string        `json:"deletedAt"`
}

type UserSettings struct {
	ID                     string   `json:"id"`
	UserID                 string   `json:"userID"`
	PrimaryCity            *string  `json:"primaryCity"`
	PrimaryState           *string  `json:"primaryState"`
	PrimaryZipCode         *string  `json:"primaryZipCode"`
	PrimaryLat             *float64 `json:"primaryLat"`
	PrimaryLong            *float64 `json:"primaryLong"`
	PreferredLocationTypes *string  `json:"preferredLocationTypes"`
	PreferredDistance      int      `json:"preferredDistance"`
	NotifyComments         bool     `json:"notifyComments"`
	NotifyEvents           bool     `json:"notifyEvents"`
	NotifyRecommendations  bool     `json:"notifyRecommendations"`
	NotifyFollowerActivity bool     `json:"notifyFollowerActivity"`
	CreatedAt              *string  `json:"createdAt"`
	UpdatedAt              *string  `json:"updatedAt"`
}

type EventStatus string

const (
	EventStatusUpcoming   EventStatus = "UPCOMING"
	EventStatusInProgress EventStatus = "IN_PROGRESS"
	EventStatusPast       EventStatus = "PAST"
)

var AllEventStatus = []EventStatus{
	EventStatusUpcoming,
	EventStatusInProgress,
	EventStatusPast,
}

func (e EventStatus) IsValid() bool {
	switch e {
	case EventStatusUpcoming, EventStatusInProgress, EventStatusPast:
		return true
	}
	return false
}

func (e EventStatus) String() string {
	return string(e)
}

func (e *EventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventStatus", str)
	}
	return nil
}

func (e EventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationType string

const (
	LocationTypeLifetimeFitness LocationType = "LIFETIME_FITNESS"
	LocationTypeYmca            LocationType = "YMCA"
	LocationTypeLaFitness       LocationType = "LA_FITNESS"
	LocationTypeAthleticClub    LocationType = "ATHLETIC_CLUB"
	LocationTypeFieldHouse      LocationType = "FIELD_HOUSE"
)

var AllLocationType = []LocationType{
	LocationTypeLifetimeFitness,
	LocationTypeYmca,
	LocationTypeLaFitness,
	LocationTypeAthleticClub,
	LocationTypeFieldHouse,
}

func (e LocationType) IsValid() bool {
	switch e {
	case LocationTypeLifetimeFitness, LocationTypeYmca, LocationTypeLaFitness, LocationTypeAthleticClub, LocationTypeFieldHouse:
		return true
	}
	return false
}

func (e LocationType) String() string {
	return string(e)
}

func (e *LocationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationType", str)
	}
	return nil
}

func (e LocationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
