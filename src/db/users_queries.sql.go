// Code generated by sqlc. DO NOT EDIT.
// source: users_queries.sql

package db

import (
	"context"
)

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, uuid, first_name, last_name, email, oauth_provider, oauth_identifier, password, avatar, last_seen_at, last_seen_location, created_at, updated_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.OauthProvider,
		&i.OauthIdentifier,
		&i.Password,
		&i.Avatar,
		&i.LastSeenAt,
		&i.LastSeenLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, uuid, first_name, last_name, email, oauth_provider, oauth_identifier, password, avatar, last_seen_at, last_seen_location, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserByID(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.OauthProvider,
		&i.OauthIdentifier,
		&i.Password,
		&i.Avatar,
		&i.LastSeenAt,
		&i.LastSeenLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByUUID = `-- name: FindUserByUUID :one
SELECT id, uuid, first_name, last_name, email, oauth_provider, oauth_identifier, password, avatar, last_seen_at, last_seen_location, created_at, updated_at, deleted_at FROM users
WHERE uuid = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserByUUID(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUUID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.OauthProvider,
		&i.OauthIdentifier,
		&i.Password,
		&i.Avatar,
		&i.LastSeenAt,
		&i.LastSeenLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
